generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String
  city        String
  country     String
  phone       String
  email       String
  rating      Float?
  rooms       Room[]
  staff       Staff[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
}

model Room {
  id            Int             @id @default(autoincrement())
  roomNumber    String
  type          String
  price         Float
  status        String
  hotelId       Int
  hotel         Hotel           @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  amenity       Amenity?        @relation(fields: [amenityId], references: [id], onDelete: SetNull)
  amenityId     Int?
  roomAmenities RoomAmenities[]

  @@unique([hotelId, roomNumber])
}

model Customer {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  phone     String
  address   String?
  bookings  Booking[]
  payments  Payment[]
  reviews   Review[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id         Int      @id @default(autoincrement())
  checkIn    DateTime
  checkOut   DateTime
  status     String
  customerId Int
  roomId     Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payment    Payment?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  paymentDate DateTime @default(now())
  method      String
  status      String
  bookingId   Int      @unique
  customerId  Int
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Staff {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  role      String
  email     String   @unique
  phone     String
  hotelId   Int
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  customerId Int
  hotelId    Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  hotel      Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Amenity {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  rooms         Room[]
  roomAmenities RoomAmenities[]
}

model RoomAmenities {
  roomId    Int
  amenityId Int
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([roomId, amenityId])
}
